#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('rest980:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var config = require('config');
const low = require('lowdb');
const FileSync = require('lowdb/adapters/FileSync');
const adapter = new FileSync('db.json');
const db = low(adapter);
db.defaults({
  missions: {},
  isOnMission: false,
  currentId: 0
}).write();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || config.port);
app.set('port', port);

/**
 * Create server.
 */
var server = http.createServer(app);

var sslKeyFile = process.env.SSL_KEY_FILE || config.sslKeyFile;
var sslCertFile = process.env.SSL_CERT_FILE || config.sslCertFile;

if (sslKeyFile && sslCertFile) {
  var sslOpts = {
    key: fs.readFileSync(sslKeyFile),
    cert: fs.readFileSync(sslCertFile)
  };
  server = https.createServer(sslOpts, app);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, "0.0.0.0");
server.on('error', onError);
server.on('listening', onListening);

// Kickoff spammer. 
startMissionLoop();

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError (error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind + (server.key ? ' (HTTPS)' : ''));
}

function startMissionLoop () {
  console.log('getting point...');
  http.get('http://localhost:3000/api/local/info/mission', function (resp) {
    let data = '';
    resp.on('data', (chunk) => data += chunk);
    resp.on('end', () => {
      missionHandler(data);
      setTimeout(startMissionLoop, config.missionPollingRate);
    });
    resp.on('error', console.error);
  });
}

var isOnMission = db.get('isOnMission').value();
// JS experts are dying inside.
var currentId = db.get('currentId').value();
if (currentId === undefined) currentId = 0;
console.log(currentId);
function missionHandler(data) {
  strData = data;
  data = JSON.parse(data);
  console.log(data);
  if (data.cleanMissionStatus.phase === 'charge') {
    db.set('isOnMission', false).write();
    isOnMission = false;
  }
  if (data.cleanMissionStatus.phase !== 'charge' && !isOnMission) {
    db.update('currentId', (id) => id + 1).write();
    currentId++;
    isOnMission = db.set('isOnMission', true).write();
    //db.set('missions.m' + currentId, []).write();
  }
  if (isOnMission) {
    let mission = 'missions.m' + currentId;
    console.log(mission);
    let existing = db.get(mission).value();
    if (existing === undefined) {
      db.set(mission, [strData]).write();
    } else if(existing[existing.length - 1] !== data) {
      db.get(mission).push(strData).write();
    }
  }
}
